/********************************** (C) COPYRIGHT *******************************
* File Name          : main.c
* Author             : WCH
* Version            : V1.0.0
* Date               : 2020/04/30
* Description        : Main program body.
*********************************************************************************
* Copyright (c) 2021 Nanjing Qinheng Microelectronics Co., Ltd.
* Attention: This software (modified or not) and binary are used for 
* microcontroller manufactured by Nanjing Qinheng Microelectronics.
*******************************************************************************/
#include "ch32v30x.h"
#include <rtthread.h>
#include <rthw.h>
#include "drivers/pin.h"



/* Global typedef */

/* Global define */
#define rt_pin "pin"
#define LED0_PIN 42
#define LED1_PIN 43

/* Global Variable */
struct rt_device_pin_mode pin0_mode = {
        .pin = LED0_PIN,
        .mode = PIN_MODE_OUTPUT,
};
struct rt_device_pin_mode pin1_mode = {
        .pin = LED1_PIN,
        .mode = PIN_MODE_OUTPUT,
};

struct rt_device_pin_status pin0_on = {
        .pin = LED0_PIN,
        .status = PIN_LOW,
};

struct rt_device_pin_status pin0_off = {
        .pin = LED0_PIN,
        .status = PIN_HIGH,
};

struct rt_device_pin_status pin1_on = {
        .pin = LED1_PIN,
        .status = PIN_LOW,
};

struct rt_device_pin_status pin1_off = {
        .pin = LED1_PIN,
        .status = PIN_HIGH,
};


void main_init(){
    rt_kprintf("\r\n MCU: CH32V307\r\n");
    SystemCoreClockUpdate();
    rt_kprintf(" SysClk: %dHz\r\n",SystemCoreClock);
    rt_kprintf(" ChipID: %08x\r\n",DBGMCU_GetCHIPID());
    rt_kprintf(" www.wch.cn\r\n");
}

int main(void)
{
    main_init();

    int err;
    // user app
    //rt_device_pin_register(rt_pin,&pin_ops,RT_NULL);

    // pin device is already init before main
    rt_device_t pin_dev =rt_device_find(rt_pin);
    if(pin_dev == RT_NULL){
        rt_kprintf("Can not find pin_dev!\r\n");
        return -1;
    }

    err = rt_device_control(pin_dev, 0, &pin0_mode);
    if(err != RT_NULL){
        rt_kprintf("Control Error!\r\n");
        return -1;
    }
    err = rt_device_control(pin_dev, 0, &pin1_mode);
    if(err != RT_NULL){
        rt_kprintf("Control Error!\r\n");
        return -1;
    }

    // remember you must open a device before read/write...
    err = rt_device_open(pin_dev, RT_DEVICE_OFLAG_RDWR);
    if(err != RT_EOK){
        rt_kprintf("Device open Error!\r\n");
        return -1;
    }

    while(1){
        rt_device_write(pin_dev, 0, &pin0_on, sizeof(pin0_on));
        rt_device_write(pin_dev, 0, &pin1_on, sizeof(pin0_on));
        rt_thread_mdelay(500);
        rt_device_write(pin_dev, 0, &pin0_off, sizeof(pin0_off));
        rt_device_write(pin_dev, 0, &pin1_off, sizeof(pin0_on));
        rt_thread_mdelay(500);
    }

    return 0;
}





